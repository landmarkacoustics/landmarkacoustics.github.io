---
title: Set up your own MySQL server
author: Ben Taft
copyright: 2020 by Landmark Acoustics LLC
---

# Set Up Your Own MySQL Server

These instructions pertain to Ubuntu. You don't have to, but the idea is to put
the MySQL server on a different machine than the web server.

## Log In to The Machine that will Serve MySQL

## Install MySQL Server on Your Machine
```bash
sudo apt install mysql-server
```

## Configure the Server

### Purge insecure defaults
```bash
sudo mysql_secure_installation
```

### Create a user

1. Start the MySQL shell
   ```bash
   sudo mysql
   ```

1. Create the root user and choose a password for it.
   ```mysql
   ALTER USER 'root'@'localhost'
   IDENTIFIED WITH mysql_native_password BY 'THEPASSWORDYOUCHOSE';
   ```

1. Quit MySQL
   ```mysql
   QUIT;
   ```

### Tell MySQL to require secure remote access.
1. Halt the MySQL daemon.
   ```bash
   sudo service mysql stop
   ```

1. Have MySQL set up private-key encryption.
   ```bash
   sudo mysql_ssl_rsa_setup --uid=mysql
   ```

1. Open `/etc/mysql/my.cnf`.

	1. add the following line to the `[mysqld]` part:
	```ini
        require_secure_transport=ON
	```

    1. If this is a production server, change the listening ports.

1. Restart the MySQL demon
   ```bash
   sudo service mysql start
   ```

### Define the Data Model
1. Log in with the new, required, combination of password and key
   ```bash
   sudo mysql -u root -p --ssl-ca=/var/lib/mysql/ca.pem
   ```

1. Create the database that Django will use.
   ```mysql
   CREATE DATABASE website
   CHARACTER SET utf8
   COLLATE uft8_general_ci;
   ```

1. Create a user for the Django application. In this example, it is called
'web' and it can access the MySQL server from any domain.
   ```mysql
   CREATE USER 'web'@'%'
   IDENTIFIED WITH mysql_native_password BY 'YOUR PASSWORD HERE'
   REQUIRE X509;
   ```

1. Give that user the permissions it needs in order to function.
   ```mysql
   GRANT ALL
   ON website.*
   TO 'web'@'%';
   ```

## Set Up the Webserver to Talk to Your MySQL Server
1. You will need to copy these files from `/var/lib/mysql` on the MySQL server
   to a temporary, but persistent, location on your Django machine.
   - `ca.pem`
   - `client-cert.pem`
   - `client-key.pem`

1. Log in to your Django Machine

1. After you have installed Django and run `startproject`, it should have a
   user account called `www-data`. Move the three `pem` files to the folder
   `/home/www-data/certs`.

1. Make `www-data` the owner of the files:
   ```bash
   sudo chown -R www-data:www-data /home/www-data
   ```

1. If everything went correctly then the 'web' user can log in to the mysql
   server using this command. Replace MYSQL_SERVER_DNS_NAME_OR_IP_ADDRESS and
   MYSQL_SERVER_PORT with the correct values, of course.
   ```bash
    mysql \
	-h MYSQL_SERVER_DNS_NAME_OR_IP_ADDRESS:MYSQL_SERVER_PORT \
	-u web -p \
	--ssl-ca=ca.pem \
	--ssl-cert=client-cert.pem \
	--ssl-key=client-key.pem
   ```

